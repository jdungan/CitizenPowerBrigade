var api_routes, app, bodyParser, cookieParser, express, favicon, logger, path, server, web_routes;

express = require('express');

path = require('path');

favicon = require('serve-favicon');

logger = require('morgan');

cookieParser = require('cookie-parser');

bodyParser = require('body-parser');

web_routes = require('./routes/web');

api_routes = require('./routes/api');

app = express();

app.set('views', path.join(__dirname, 'views'));

app.set('view engine', 'jade');

app.use(favicon(__dirname + '/public/img/favicon.jpg'));

app.use(logger('dev'));

app.use(bodyParser.json());

app.use(bodyParser.urlencoded({
  extended: false
}));

app.use(cookieParser());

app.use(express["static"](path.join(__dirname, 'public')));

app.use('/api', api_routes);

app.use('/', web_routes);

app.use(function(req, res, next) {
  var err;
  err = new Error('Not Found');
  err.status = 404;
  return next(err);
});

if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    return res.render('error', {
      message: err.message,
      error: err
    });
  });
}

app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  return res.render('error', {
    message: err.message,
    error: {}
  });
});

app.set('port', process.env.PORT || 4013);

server = app.listen(app.get('port'), function() {
  return console.log('Express server listening on port ' + server.address().port);
});

//# sourceMappingURL=data:application/json;base64,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Q0FBQyxNQUFKLElBQWMsR0FBekIsQ0FBQSxDQUFBO1NBQ0EsR0FBRyxDQUFDLE1BQUosQ0FBVyxPQUFYLEVBQW9CO0FBQUEsSUFDZCxPQUFBLEVBQVMsR0FBRyxDQUFDLE9BREM7QUFBQSxJQUVkLEtBQUEsRUFBTyxFQUZPO0dBQXBCLEVBRk07QUFBQSxDQUFSLENBN0NBLENBQUE7O0FBQUEsR0FvREcsQ0FBQyxHQUFKLENBQVEsTUFBUixFQUFpQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQVosSUFBb0IsSUFBckMsQ0FwREEsQ0FBQTs7QUFBQSxNQXNEQSxHQUFTLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLEdBQUosQ0FBUSxNQUFSLENBQVgsRUFBNEIsU0FBQSxHQUFBO1NBQ25DLE9BQU8sQ0FBQyxHQUFSLENBQVksbUNBQUEsR0FBc0MsTUFBTSxDQUFDLE9BQVAsQ0FBQSxDQUFnQixDQUFDLElBQW5FLEVBRG1DO0FBQUEsQ0FBNUIsQ0F0RFQsQ0FBQSIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJleHByZXNzICAgICAgPSByZXF1aXJlKCdleHByZXNzJyk7XG5wYXRoICAgICAgICAgPSByZXF1aXJlKCdwYXRoJyk7XG5mYXZpY29uICAgICAgPSByZXF1aXJlKCdzZXJ2ZS1mYXZpY29uJyk7XG5sb2dnZXIgICAgICAgPSByZXF1aXJlKCdtb3JnYW4nKTtcbmNvb2tpZVBhcnNlciA9IHJlcXVpcmUoJ2Nvb2tpZS1wYXJzZXInKTtcbmJvZHlQYXJzZXIgICA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG53ZWJfcm91dGVzICAgICAgID0gcmVxdWlyZSgnLi9yb3V0ZXMvd2ViJyk7XG5hcGlfcm91dGVzICAgICAgID0gcmVxdWlyZSgnLi9yb3V0ZXMvYXBpJyk7XG5cbmFwcCA9IGV4cHJlc3MoKTtcblxuIyB2aWV3IGVuZ2luZSBzZXR1cFxuYXBwLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAndmlld3MnKSlcbmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2phZGUnKVxuXG5hcHAudXNlKGZhdmljb24oX19kaXJuYW1lICsgJy9wdWJsaWMvaW1nL2Zhdmljb24uanBnJykpXG5hcHAudXNlKGxvZ2dlcignZGV2JykpXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKVxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpXG5hcHAudXNlKGNvb2tpZVBhcnNlcigpKVxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAncHVibGljJykpKVxuXG5cbmFwcC51c2UoJy9hcGknLCBhcGlfcm91dGVzKVxuYXBwLnVzZSgnLycsIHdlYl9yb3V0ZXMpXG5cbiMgLy8gY2F0Y2ggNDA0IGFuZCBmb3J3YXJkIHRvIGVycm9yIGhhbmRsZXJcbmFwcC51c2UgKHJlcSwgcmVzLCBuZXh0KSAtPlxuICBlcnIgPSBuZXcgRXJyb3IgJ05vdCBGb3VuZCdcbiAgZXJyLnN0YXR1cyA9IDQwNFxuICBuZXh0IGVyclxuXG4jIC8vIGVycm9yIGhhbmRsZXJzXG4jIC8vIGRldmVsb3BtZW50IGVycm9yIGhhbmRsZXJcbiMgLy8gd2lsbCBwcmludCBzdGFja3RyYWNlXG5pZiBhcHAuZ2V0KCdlbnYnKSBpcyAnZGV2ZWxvcG1lbnQnXG4gIGFwcC51c2UgKGVyciwgcmVxLCByZXMsIG5leHQpIC0+XG4gICAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDUwMClcbiAgICByZXMucmVuZGVyICdlcnJvcicsIHtcbiAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgZXJyb3I6IGVyclxuICAgIH1cbiAgICAgICAgXG4jIC8vIHByb2R1Y3Rpb24gZXJyb3IgaGFuZGxlclxuIyAvLyBubyBzdGFja3RyYWNlcyBsZWFrZWQgdG8gdXNlclxuYXBwLnVzZSAoZXJyLCByZXEsIHJlcywgbmV4dCkgLT5cbiAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIG9yIDUwMClcbiAgcmVzLnJlbmRlciAnZXJyb3InLCB7XG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgICBlcnJvcjoge31cbiAgICB9XG5cbmFwcC5zZXQgJ3BvcnQnLCAocHJvY2Vzcy5lbnYuUE9SVCBvciA0MDEzKVxuXG5zZXJ2ZXIgPSBhcHAubGlzdGVuIGFwcC5nZXQoJ3BvcnQnKSwgLT5cbiAgY29uc29sZS5sb2cgJ0V4cHJlc3Mgc2VydmVyIGxpc3RlbmluZyBvbiBwb3J0ICcgKyBzZXJ2ZXIuYWRkcmVzcygpLnBvcnRcbiJdfQ==