"use strict";
var Sequelize, basename, config, db, env, fs, path, sequelize,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require("fs");

path = require("path");

Sequelize = require("sequelize");

basename = path.basename(module.filename);

env = process.env.NODE_ENV || "development";

config = require(__dirname + '/../config/config.json')[env];

sequelize = new Sequelize(config.database, config.username, config.password, config);

db = {};

fs.readdirSync(__dirname).filter(function(file) {
  return (file.indexOf(".") !== 0) && (file !== basename);
}).forEach(function(file) {
  var model;
  model = sequelize["import"](path.join(__dirname, file));
  return db[model.name] = model;
});

Object.keys(db).forEach(function(modelName) {
  if (indexOf.call(db[modelName], "associate") >= 0) {
    return db[modelName].associate(db);
  }
});

db.sequelize = sequelize;

db.Sequelize = Sequelize;

module.exports = db;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLHlEQUFBO0VBQUEsbUpBQUE7O0FBQUEsRUFDQSxHQUFZLE9BQUEsQ0FBUSxJQUFSLENBRFosQ0FBQTs7QUFBQSxJQUVBLEdBQVksT0FBQSxDQUFRLE1BQVIsQ0FGWixDQUFBOztBQUFBLFNBR0EsR0FBWSxPQUFBLENBQVEsV0FBUixDQUhaLENBQUE7O0FBQUEsUUFJQSxHQUFZLElBQUksQ0FBQyxRQUFMLENBQWMsTUFBTSxDQUFDLFFBQXJCLENBSlosQ0FBQTs7QUFBQSxHQUtBLEdBQVksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFaLElBQXdCLGFBTHBDLENBQUE7O0FBQUEsTUFNQSxHQUFZLE9BQUEsQ0FBUSxTQUFBLEdBQVksd0JBQXBCLENBQThDLENBQUEsR0FBQSxDQU4xRCxDQUFBOztBQUFBLFNBT0EsR0FBZ0IsSUFBQSxTQUFBLENBQVUsTUFBTSxDQUFDLFFBQWpCLEVBQTJCLE1BQU0sQ0FBQyxRQUFsQyxFQUE0QyxNQUFNLENBQUMsUUFBbkQsRUFBNkQsTUFBN0QsQ0FQaEIsQ0FBQTs7QUFBQSxFQVFBLEdBQVksRUFSWixDQUFBOztBQUFBLEVBV0UsQ0FBQyxXQURILENBQ2UsU0FEZixDQUVFLENBQUMsTUFGSCxDQUVXLFNBQUMsSUFBRCxHQUFBO0FBQ1AsU0FBTyxDQUFDLElBQUksQ0FBQyxPQUFMLENBQWEsR0FBYixDQUFBLEtBQXVCLENBQXhCLENBQUEsSUFBK0IsQ0FBQyxJQUFBLEtBQVUsUUFBWCxDQUF0QyxDQURPO0FBQUEsQ0FGWCxDQUtFLENBQUMsT0FMSCxDQUtXLFNBQUMsSUFBRCxHQUFBO0FBQ1AsTUFBQSxLQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsU0FBVSxDQUFBLFFBQUEsQ0FBVixDQUFvQixJQUFJLENBQUMsSUFBTCxDQUFVLFNBQVYsRUFBcUIsSUFBckIsQ0FBcEIsQ0FBUixDQUFBO1NBQ0EsRUFBRyxDQUFBLEtBQUssQ0FBQyxJQUFOLENBQUgsR0FBaUIsTUFGVjtBQUFBLENBTFgsQ0FWQSxDQUFBOztBQUFBLE1Bb0JNLENBQUMsSUFBUCxDQUFZLEVBQVosQ0FBZSxDQUFDLE9BQWhCLENBQXdCLFNBQUMsU0FBRCxHQUFBO0FBQ3RCLEVBQUEsSUFBRyxhQUFlLEVBQUcsQ0FBQSxTQUFBLENBQWxCLEVBQUEsV0FBQSxNQUFIO1dBQ0UsRUFBRyxDQUFBLFNBQUEsQ0FBVSxDQUFDLFNBQWQsQ0FBd0IsRUFBeEIsRUFERjtHQURzQjtBQUFBLENBQXhCLENBcEJBLENBQUE7O0FBQUEsRUF3QkUsQ0FBQyxTQUFILEdBQWUsU0F4QmYsQ0FBQTs7QUFBQSxFQXlCRSxDQUFDLFNBQUgsR0FBZSxTQXpCZixDQUFBOztBQUFBLE1BMkJNLENBQUMsT0FBUCxHQUFpQixFQTNCakIsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnMgICAgICAgID0gcmVxdWlyZShcImZzXCIpO1xucGF0aCAgICAgID0gcmVxdWlyZShcInBhdGhcIik7XG5TZXF1ZWxpemUgPSByZXF1aXJlKFwic2VxdWVsaXplXCIpO1xuYmFzZW5hbWUgID0gcGF0aC5iYXNlbmFtZShtb2R1bGUuZmlsZW5hbWUpO1xuZW52ICAgICAgID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgXCJkZXZlbG9wbWVudFwiO1xuY29uZmlnICAgID0gcmVxdWlyZShfX2Rpcm5hbWUgKyAnLy4uL2NvbmZpZy9jb25maWcuanNvbicpW2Vudl07XG5zZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKGNvbmZpZy5kYXRhYmFzZSwgY29uZmlnLnVzZXJuYW1lLCBjb25maWcucGFzc3dvcmQsIGNvbmZpZyk7XG5kYiAgICAgICAgPSB7fTtcblxuZnNcbiAgLnJlYWRkaXJTeW5jKF9fZGlybmFtZSlcbiAgLmZpbHRlciggKGZpbGUpIC0+XG4gICAgcmV0dXJuIChmaWxlLmluZGV4T2YoXCIuXCIpIGlzbnQgMCkgYW5kIChmaWxlIGlzbnQgYmFzZW5hbWUpO1xuICApXG4gIC5mb3JFYWNoKChmaWxlKSAtPlxuICAgIG1vZGVsID0gc2VxdWVsaXplW1wiaW1wb3J0XCJdKHBhdGguam9pbihfX2Rpcm5hbWUsIGZpbGUpKTtcbiAgICBkYlttb2RlbC5uYW1lXSA9IG1vZGVsO1xuICApXG5cbk9iamVjdC5rZXlzKGRiKS5mb3JFYWNoIChtb2RlbE5hbWUpIC0+XG4gIGlmIFwiYXNzb2NpYXRlXCIgaW4gZGJbbW9kZWxOYW1lXVxuICAgIGRiW21vZGVsTmFtZV0uYXNzb2NpYXRlKGRiKTtcblxuZGIuc2VxdWVsaXplID0gc2VxdWVsaXplO1xuZGIuU2VxdWVsaXplID0gU2VxdWVsaXplO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRiO1xuIl19