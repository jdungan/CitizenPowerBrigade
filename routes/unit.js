var connect_string, express, pg, router;

express = require("express");

pg = require("pg");

router = express.Router();

connect_string = process.env.DATABASE_URL;

router.post("/:id", function(req, res) {
  var body, id;
  id = req.params.id;
  body = req.body;
  return pg.connect(connect_string, function(err, client, done) {
    return client.query('INSERT into raw_reports (id, blob) VALUES("' + id + '", "' + body + '")');
  });
});

router.post("/:id/gps", function(req, res) {
  var body, id;
  id = req.params.id;
  body = req.body;
  return pg.connect(connect_string, function(err, client, done) {
    return client.query('INSERT into unit_location (id, blob) VALUES("' + id + '", "' + body + '")');
  });
});

router.get("/all", function(req, res) {
  return db.unprocessed(res);
});

router.get("/:id", function(req, res) {
  return pg.connect(connect_string, function(err, client, done) {
    var id;
    id = +req.params.id;
    if (id) {
      return client.query('SELECT * FROM raw_reports WHERE unit_id=' + req.params.id, function(err, result) {
        done();
        if (err) {
          console.error(err);
          return res.send("Error " + err);
        } else {
          return res.send(result.rows);
        }
      });
    } else {
      return res.send("Invalid Id");
    }
  });
});

module.exports = router;

//# sourceMappingURL=data:application/json;base64,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Y2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIilcbnBnID0gcmVxdWlyZShcInBnXCIpXG5yb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpXG5jb25uZWN0X3N0cmluZyA9IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTFxuICBcbnJvdXRlci5wb3N0IFwiLzppZFwiLCAocmVxLCByZXMpIC0+XG4gIGlkID0gcmVxLnBhcmFtcy5pZFxuICBib2R5ID0gcmVxLmJvZHlcbiAgcGcuY29ubmVjdCBjb25uZWN0X3N0cmluZywgKGVyciwgY2xpZW50LCBkb25lKS0+XG4gICAgY2xpZW50LnF1ZXJ5KCdJTlNFUlQgaW50byByYXdfcmVwb3J0cyAoaWQsIGJsb2IpIFZBTFVFUyhcIicraWQrJ1wiLCBcIicrYm9keSsnXCIpJylcblxucm91dGVyLnBvc3QgXCIvOmlkL2dwc1wiLCAocmVxLCByZXMpIC0+XG4gIGlkID0gcmVxLnBhcmFtcy5pZFxuICBib2R5ID0gcmVxLmJvZHlcbiAgcGcuY29ubmVjdCBjb25uZWN0X3N0cmluZywgKGVyciwgY2xpZW50LCBkb25lKS0+XG4gICAgY2xpZW50LnF1ZXJ5KCdJTlNFUlQgaW50byB1bml0X2xvY2F0aW9uIChpZCwgYmxvYikgVkFMVUVTKFwiJytpZCsnXCIsIFwiJytib2R5KydcIiknKVxuXHRcbnJvdXRlci5nZXQgXCIvYWxsXCIsIChyZXEsIHJlcykgLT5cblx0ZGIudW5wcm9jZXNzZWQgcmVzXG5cblxucm91dGVyLmdldCBcIi86aWRcIiwgIChyZXEsIHJlcykgLT5cbiAgcGcuY29ubmVjdCBjb25uZWN0X3N0cmluZywgKGVyciwgY2xpZW50LCBkb25lKSAtPlxuICAgIGlkID0gK3JlcS5wYXJhbXMuaWRcbiAgICBpZiBpZFxuICAgICAgY2xpZW50LnF1ZXJ5ICdTRUxFQ1QgKiBGUk9NIHJhd19yZXBvcnRzIFdIRVJFIHVuaXRfaWQ9JytyZXEucGFyYW1zLmlkLCAoZXJyLCByZXN1bHQpIC0+XG4gICAgICAgIGRvbmUoKVxuICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgICAgIHJlcy5zZW5kKFwiRXJyb3IgXCIgKyBlcnIpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXMuc2VuZChyZXN1bHQucm93cylcbiAgICBlbHNlXG4gICAgICByZXMuc2VuZChcIkludmFsaWQgSWRcIilcblxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXJcbiJdfQ==